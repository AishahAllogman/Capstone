#Actor table :
class Actor(db.Model):
    __tablename__ = 'Actor'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(120))
    age = db.Column(db.Integer)
    gender = db.Column(db.String(10))
    Actorinmoive = db.relationship('Actorinmoive', backref='Actor', lazy=True)


    def __init__(self, id, name, gender, Actorinmoive):
        self.id = id
        self.name = name
        self.gender = gender
        self.Actorinmoive = Actorinmoive

    def insert(self):
        db.session.add(self)
        db.session.commit()
  
    def update(self):
        db.session.commit()

    def delete(self):
        db.session.delete(self)
        db.session.commit()

    def format(self):
        return {
        'id':self.id,
        'name':elf.name,
        'gender':self.gender,
        'Actorinmoive':self.Actorinmoive   
        }
#realtionshiptable : 
class Actorinmoive(db.Model):
       __tablename__ = 'Actorinmoive'
       Actorinmoive_id = db.Column(db.Integer, primary_key=True)
       Moive_id = db.Column(db.Integer, db.ForeignKey('Moive.id'), nullable=True)
       Actor_id = db.Column(db.Integer, db.ForeignKey('Actor.id'), nullable=True)
    
       def __init__(self,Actorinmoive_id, Moive_id, Actor_id):
            self.Actorinmoive_id = Actorinmoive_id
            self.Actor_id = Actor_id
            self.Moive_id = Moive_id
            
       def insert(self):
           db.session.add(self)
           db.session.commit()
  
       def update(self):
           db.session.commit()

       def delete(self):
           db.session.delete(self)
           db.session.commit()

       def format(self):
            return {
            'Actorinmoive_id':self.Actorinmoive_id, 
            'Actor_id':self.Actor_id, 
            'Moive_id':self.Moive_id
            
            }

@app.route('/moives/<int:miove_id>', methods=['PATCH'])
#@requires_auth('patch:drinks')
def edit_moives(moives_id):
    moive = Moive.query.filter(Moive.id == moives_id).one_or_none()
    if moive is None:
        abort(404)
    body = request.get_json()
    req_title = body.get('title')
    req_releasedata =  body.get('release_data')
    try:
        moive.title = req_title
        moive.recipe = req_releasedata
        moive.update()

        return jsonify({
            'success': True,
            'moive': [moive.format()]

        })
    except Exception as e:
        print(e)
        abort(422)


        
